* System overview
The afmachine or agent factory machine is a wrapper to all business logic
associated with the agent_factory product and at the moment serves as the
controller to the MVC pattern within the afadmin_client.

afmachine as of now is responsible for:

- Responding to user initiated events
- Validating input
- Communicating with the backend server
- Handling backend server responses
- Logging
- Persisting state
- Providing state

* System architecture
client event -> logEvent -> backend request -> parse backend request -> log backend
request -> hand in data -> afadmin_client

state_event -> logEvent -> hydrate state -> state permits change -> backend
request -> parse backend request -> log backend request -> persist state -> hand
in data -> afadmin_client

state_event -> logEvent -> hydrate state -> state does not permit change ->
logEvent -> afadmin_client

* System configuration
** Parameters
* Log 12/06/23
config.js file  environment variables

Basically i need to treat afmachine as a library.

** Registering a player
** stateful changes
Stateful should anticipate a stateful duplicate somewhere along the prototype
chain. It should then proceed to merge the two stateful objects instead of
attaching its payload to the object provided.

Stateful should extend an object's prototype, not attach functionality directly
on the object.

Statefull creates a new object. The new object has as its prototype the stateful object.

* Log 13/06/23
** DONE create the user registration process
CLOSED: [2023-06-13 Tue 19:10]

** Create mock server
** TODO register a wristband to a player
*** scan the wristband

* Log 14/06/23
** Build and Test backend routes
Each backend route is required to log and *translate* its traffic.

** Create a routing system.
before each route
after each route
** importing typedefs
/** @type {import('./some.js')} */

/* @typedef MyType
/* @prop {string} name
/* @prop {string} description

export const Types = {}

import * as Types from './types.js';
{Types.MyType}

/**
 * @typedef {import("path/ClassName").<name>} ClassName
 */

** Create a mock backend server so that routes can be tested.
*** add test mode to dotenv.sh
